// Generated by CoffeeScript 1.6.3
(function() {
  var User, express, http, keys, mongoose, nib, stylus, twitter, _;

  express = require('express');

  stylus = require('stylus');

  nib = require('nib');

  mongoose = require('mongoose');

  User = require("../models/user");

  twitter = require("ntwitter");

  keys = require("../config/keys");

  http = require('http');

  _ = require('underscore');

  module.exports = function(io) {
    var app, clients, compile;
    app = express();
    compile = function(str, path) {
      return stylus(str).set("filename", path).use(nib());
    };
    app.use(express.cookieSession({
      secret: "doyouwannaknowmysecret?"
    }));
    app.use(stylus.middleware({
      src: "" + __dirname + "/../../public",
      compile: compile
    }));
    app.use(app.router);
    app.set("views", __dirname + "/views");
    app.use(express["static"]("" + __dirname + "/../../public"));
    clients = {};
    io.sockets.on("connection", function(client) {
      var changeTrack, paused, _getTwitterSession;
      console.log("Connected!", client.id);
      paused = false;
      changeTrack = function(_track, userId) {
        var twitterSession;
        twitterSession = _getTwitterSession(userId);
        return twitterSession.stream("statuses/filter", {
          track: _track
        }, function(stream) {
          stream.on("data", function(data) {
            if (data.user && !paused) {
              return client.emit("message", data);
            }
          });
          return stream.on("destroy", function(response) {
            return console.log("Destroying stream...");
          });
        });
      };
      _getTwitterSession = function(userId) {
        return clients[userId].twitterSession;
      };
      client.on("change_track", function(payload) {
        var track, userId;
        track = payload.track;
        userId = payload.userId;
        console.log("Using track(s): ", track);
        return changeTrack(track, userId);
      });
      client.on('pause_stream', function() {
        return paused = true;
      });
      return client.on('resume_stream', function() {
        return paused = false;
      });
    });
    return app.get('/', function(req, res, next) {
      var userId, _ref,
        _this = this;
      userId = (_ref = req.session.passport) != null ? _ref.user : void 0;
      if (userId) {
        return User.findOne({
          id_str: userId
        }, function(err, user) {
          var twitterSession;
          twitterSession = new twitter(_.extend(keys, {
            access_token_key: user.token,
            access_token_secret: user.tokenSecret
          }));
          clients[userId] = {
            twitterSession: twitterSession,
            user: user
          };
          return res.render("index", {
            user: user,
            userId: userId
          });
        });
      } else {
        return res.redirect("/login");
      }
    });
  };

}).call(this);
