// Generated by CoffeeScript 1.6.3
(function() {
  var express, http, keys, mongoose, nib, stylus, twitter;

  express = require("express");

  stylus = require("stylus");

  nib = require("nib");

  mongoose = require("mongoose");

  twitter = require("ntwitter");

  keys = require("../config/keys")();

  http = require("http");

  module.exports = function(socket) {
    var app, changeTrack, compile, track, twit;
    app = express();
    compile = function(str, path) {
      return stylus(str).set("filename", path).include(nib.path);
    };
    app.use(express.logger("\u001b[90m:method\u001b[0m \u001b[36m:url\u001b[0m \u001b[90m:response-time ms\u001b[0m"));
    app.use(express.methodOverride());
    app.use(express.cookieParser());
    app.use(express.bodyParser());
    app.use(express.errorHandler({
      dumpException: true,
      showStack: true
    }));
    app.use(express.cookieSession({
      secret: "doyouwannaknowmysecret?"
    }));
    app.use(app.router);
    app.use(express["static"](__dirname + "/../public"));
    app.set("view engine", "jade");
    app.set("views", __dirname + "/views");
    app.use(stylus.middleware({
      src: __dirname + "/../public",
      compile: compile
    }));
    twit = new twitter(keys);
    track = "test";
    changeTrack = function(_track, client) {
      return twit.stream("statuses/filter", {
        track: _track
      }, function(stream) {
        stream.on("data", function(data) {
          return client.emit("message", data);
        });
        return stream.on("destroy", function(response) {
          return console.log("Destroying stream...");
        });
      });
    };
    socket.on("connection", function(client) {
      console.log("Connected!");
      changeTrack(track, client);
      return client.on("change_track", function(_track) {
        track = _track.track;
        console.log("Using track(s): ", track);
        return changeTrack(track, client);
      });
    });
    return app.get('/', function(req, res, next) {
      return res.render("index", {});
    });
  };

}).call(this);
